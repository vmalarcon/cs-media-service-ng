<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aws-context="http://www.springframework.org/schema/cloud/aws/context"
       xmlns:aws-messaging="http://www.springframework.org/schema/cloud/aws/messaging"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/cloud/aws/context
                          http://www.springframework.org/schema/cloud/aws/context/spring-cloud-aws-context-1.0.xsd
                          http://www.springframework.org/schema/cloud/aws/messaging http://www.springframework.org/schema/cloud/aws/messaging/spring-cloud-aws-messaging-1.0.xsd
                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:${EXPEDIA_ENVIRONMENT}.${AWS_REGION}.properties"/>
    <import resource="collector-rabbit.xml" />

    <aws-messaging:annotation-driven-queue-listener wait-time-out="20" />

    <aws-context:context-region region="${AWS_REGION}" />

    <bean id="filenamesRabbitTemplate" class="org.springframework.amqp.rabbit.core.RabbitTemplate">
        <property name="connectionFactory" ref="rabbitConnectionFactory"/>
        <property name="queue" value="${collector.queue}" />
        <property name="routingKey" value="${collector.queue}" />
    </bean>
    <bean id="retryableAspect" class="com.expedia.content.media.processing.pipeline.retry.RetryableAspect" factory-method="aspectOf" autowire="byType" />


    <!--can define multiple validator-->
    <bean id="mediaServiceProcess" class="com.expedia.content.media.processing.services.MediaServiceProcess">
        <constructor-arg>
            <list>
                <ref bean="expediaValidator"/>
                <ref bean="categoryValidator"/>
                <ref bean="providerRequiredValidator"/>
                <ref bean="fileUrlRequiredValidator"/>
                <ref bean="imageTypeRequiredValidator"/>
                <ref bean="mediaProviderValidator"/>
            </list>
        </constructor-arg>
        <constructor-arg ref="filenamesRabbitTemplate"/>
        <constructor-arg ref="threadedLogger"/>
        <constructor-arg ref="compositeReporter"/>

        <property name="mediaStatusValidatorList">
            <list value-type="com.expedia.content.media.processing.services.validator.RequestMessageValidator">
                <ref bean="mediaStatusTypeValidator"/>
            </list>
        </property>
        <property name="activityWhiteList">
            <list>
                <ref bean="receptionActivity"/>
                <ref bean="derivativeCreationActivity"/>
                <ref bean="rejectActivity"/>
                <ref bean="publishActivity"/>
                <ref bean="dcpPickupActivity"/>
                <ref bean="carsDerivativeCreationActivity"/>
            </list>
        </property>
        <property name="processLogDao" ref="processLogDao" />
        <property name="mapValidatorList">
            <map>
                <entry key ="EPC">
                    <list value-type="com.expedia.content.media.processing.services.validator.MapMessageValidator">
                        <ref bean="mvelValidator"/>
                    </list>
                </entry>
            </map>
        </property>
        <property name="messagingTemplate" ref="queueMessagingTemplate">
        </property>
    </bean>

    <aws-messaging:queue-messaging-template id="queueMessagingTemplate" />

    <bean id="mvelValidator" class="com.expedia.content.media.processing.services.validator.EPCMVELValidator">
      <property name="ruleMaps">
          <map>
              <entry key ="EPC">
                  <list>
                      <value>imageMessage.fileUrl != null ? "valid" : "fileUrl is required."</value>
                      <value>imageMessage.fileUrl.matches('.*http://.*|.*https://.*|.*s3://.*|.*file:///.*') ? "valid" : "fileUrl is malformed."</value>
                      <value>imageMessage.fileName != null ? "valid" : "fileName is required."</value>
                      <value>imageMessage.mediaId != null ? "valid": "mediaId is required."</value>
                      <!--
                      <value>(imageMessage.outerDomainData != null &amp;&amp; !imageMessage.domain.toString.matches('Lodging|Cars')) ? "domain must be Lodging." : "valid"</value>
                      <value>domainData.domainId != null ? "valid" : "domainDataId is required."</value>
                      <value>domainData.domain != null ? "valid" : "domain is required."</value>
                      <value>(domainData.domain.equals('Lodging') &amp;&amp; !domainData.domainId.matches("[0-9]+")) ? "domainId is not numeric." : "valid"</value>
                      <value>(domainData.domain.equals('Lodging') &amp;&amp; domainData.domainFields != null &amp;&amp; domainData.domainFields.categoryId != null &amp;&amp; !domainData.domainFields.categoryId.matches("[0-9]+")) ? "categoryId is not numeric." : "valid"</value>
                      <value>(domainData.domainFields != null &amp;&amp; domainData.domainFields.mediaProviderId != null &amp;&amp; !domainData.domainFields.mediaProviderId.matches("[0-9]+")) ? "mediaProviderId is not numeric." : "valid"</value>
                      <value>(domainData.domainFields != null &amp;&amp; domainData.domainFields.propertyHero != null &amp;&amp; !domainData.domainFields.propertyHero.matches('true|false')) ? "propertyHero must be true or false." : "valid"</value>
                      <value>(domainData.domainFields != null &amp;&amp; domainData.domainFields.roomHero != null &amp;&amp; !domainData.domainFields.roomHero.matches('true|false')) ? "roomHero must be true or false." : "valid"</value>
                      <value>(domainData.domainFields != null &amp;&amp; domainData.domainFields.roomId != null &amp;&amp; !domainData.domainFields.roomId.matches("[0-9]+")) ? "roomId is not numeric." : "valid"</value>
                      <value>(domainData.derivativeCategory != null &amp;&amp; !domainData.derivativeCategory.matches('VirtualTour')) ? "derivativeType is required." : "valid"</value>
                      <value>(domainData.domain != null &amp;&amp; !domainData.domain.toString.matches('Lodging|Cars|VirtualTour')) ? "imageType must be Lodging, VirtualTour or Cars." : "valid"</value>
                      -->
                  </list>
              </entry>
          </map>
      </property>
    </bean>

    <bean id="receptionActivity" class="com.expedia.content.media.processing.services.util.ActivityMapping">
        <!-- this will work -->
        <property name="activityType" value="Reception"/>
        <!-- this will *not* work -->
        <property name="statusMessage" value="RECEIVED"/>
        <property name="mediaType" value=".*"/>
    </bean>

    <bean id="derivativeCreationActivity" class="com.expedia.content.media.processing.services.util.ActivityMapping">
        <property name="activityType" value="DerivativeCreation"/>
        <property name="statusMessage" value="DERIVATIVES_CREATED"/>
        <property name="mediaType" value="VirtualTour|Lodging"/>
    </bean>

    <bean id="rejectActivity" class="com.expedia.content.media.processing.services.util.ActivityMapping">
        <property name="activityType" value="Reject"/>
        <property name="statusMessage" value="REJECTED"/>
        <property name="mediaType" value=".*"/>
    </bean>

    <bean id="publishActivity" class="com.expedia.content.media.processing.services.util.ActivityMapping">
        <property name="activityType" value="Publish"/>
        <property name="statusMessage" value="PUBLISHED"/>
        <property name="mediaType" value=".*"/>
    </bean>

    <bean id="dcpPickupActivity" class="com.expedia.content.media.processing.services.util.ActivityMapping">
        <property name="activityType" value="DcpPickup"/>
        <property name="statusMessage" value="RECEIVED"/>
        <property name="mediaType" value="Cars"/>
    </bean>

    <bean id="carsDerivativeCreationActivity" class="com.expedia.content.media.processing.services.util.ActivityMapping">
        <property name="activityType" value="DerivativeCreation"/>
        <property name="statusMessage" value="PUBLISHED"/>
        <property name="mediaType" value="Cars"/>
    </bean>

    <bean id="expediaValidator" class="com.expedia.content.media.processing.services.validator.ExpediaIdValidator">
        <property name="fieldName" value="expediaId" />
    </bean>
    <bean id="providerRequiredValidator" class="com.expedia.content.media.processing.services.validator.RequiredValidator">
        <property name="fieldName" value="mediaProviderId" />
    </bean>
    <bean id="fileUrlRequiredValidator" class="com.expedia.content.media.processing.services.validator.RequiredValidator">
        <property name="fieldName" value="fileUrl" />
    </bean>
    <bean id="imageTypeRequiredValidator" class="com.expedia.content.media.processing.services.validator.RequiredValidator">
        <property name="fieldName" value="imageType" />
    </bean>
    <bean id="categoryValidator" class="com.expedia.content.media.processing.services.validator.NumericValidator">
        <property name="fieldName" value="categoryId" />
    </bean>
    <bean id="mediaProviderValidator" class="com.expedia.content.media.processing.services.validator.NumericValidator">
        <property name="fieldName" value="mediaProviderId" />
    </bean>

    <bean id="mediaStatusTypeValidator"
          class="com.expedia.content.media.processing.services.validator.MediaNamesValidator">
    </bean>

    <bean id="processLogDao" class="com.expedia.content.media.processing.services.dao.LcmProcessLogDao">
        <constructor-arg name="processName" value="${processname}" />
        <constructor-arg name="sqlMediaLogSproc">
            <bean class="com.expedia.content.media.processing.services.dao.SQLMediaLogSproc" />
        </constructor-arg>
    </bean>

    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver" />
        <property name="url" value="${datasource.url}" />
        <property name="username" value="${datasource.username}" />
        <property name="password" value="${datasource.password}" />
    </bean>

    <bean id="threadedLogger" class="com.expedia.content.media.processing.pipeline.reporting.ThreadLogActivityProcess">
        <constructor-arg name="logThreadPoolSize" value="10" />
    </bean>

    <bean id="compositeReporter" class="com.expedia.content.media.processing.pipeline.reporting.CompositeReporting" primary="true">
        <constructor-arg name="reports">
            <list>
                <ref bean="dynamoReporter" />
                <ref bean="lcmReporter" />
            </list>
        </constructor-arg>
    </bean>

    <bean id="dynamoReporter" class="com.expedia.content.media.processing.pipeline.reporting.dynamo.DynamoReporting">
        <constructor-arg name="dynamoMapper" ref="dynamoMapper" />
        <constructor-arg name="appName" value="${processname}" />
    </bean>

    <bean id="amazonDynamoDB" class="com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient">
        <property name="endpoint" value="${aws.endPoint}" />
    </bean>

    <bean id="dynamoMapper"
          class="com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper">
        <constructor-arg name="dynamoDB" ref="amazonDynamoDB" />
    </bean>

    <bean id="lcmReporter" class="com.expedia.content.media.processing.pipeline.reporting.sql.LcmReporting">
        <constructor-arg name="logEntryInsertProcedure" ref="lcmInsertSproc" />
        <constructor-arg name="appName" value="${processname}" />
    </bean>

    <bean id="lcmInsertSproc" primary="true"
          class="com.expedia.content.media.processing.pipeline.reporting.sql.SQLLogEntryInsertSproc" />

    <!-- Retry -->
    <bean id="loggingRetryListener" class="com.expedia.content.media.processing.pipeline.retry.LoggingRetryListener" />

    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="retryPolicy">
            <bean class="org.springframework.retry.policy.ExceptionClassifierRetryPolicy">
                <property name="policyMap">
                    <map>
                        <entry key="java.net.MalformedURLException">
                            <bean class="org.springframework.retry.policy.NeverRetryPolicy" />
                        </entry>
                        <entry key="com.expedia.content.media.processing.pipeline.exception.ImageMessageException">
                            <bean class="org.springframework.retry.policy.NeverRetryPolicy" />
                        </entry>
                        <entry key="java.net.URISyntaxException">
                            <bean class="org.springframework.retry.policy.NeverRetryPolicy" />
                        </entry>
                        <entry key="java.nio.file.FileSystemNotFoundException">
                            <bean class="org.springframework.retry.policy.NeverRetryPolicy" />
                        </entry>
                        <entry key="org.im4java.core.InfoException">
                            <bean class="org.springframework.retry.policy.NeverRetryPolicy" />
                        </entry>
                        <entry key="java.lang.Exception">
                            <bean class="org.springframework.retry.policy.SimpleRetryPolicy">
                                <property name="maxAttempts" value="${retry.max.attempts}" />
                            </bean>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.FixedBackOffPolicy">
                <property name="backOffPeriod" value="${retry.interval.ms}" />
            </bean>
        </property>
        <property name="listeners">
            <list>
                <ref bean="loggingRetryListener" />
            </list>
        </property>
    </bean>

</beans>
