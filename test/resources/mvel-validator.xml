<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aws-context="http://www.springframework.org/schema/cloud/aws/context"
       xmlns:aws-messaging="http://www.springframework.org/schema/cloud/aws/messaging"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/cloud/aws/context
                          http://www.springframework.org/schema/cloud/aws/context/spring-cloud-aws-context-1.0.xsd
                          http://www.springframework.org/schema/cloud/aws/messaging http://www.springframework.org/schema/cloud/aws/messaging/spring-cloud-aws-messaging-1.0.xsd
                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <bean id="mvelValidator" class="com.expedia.content.media.processing.services.validator.MVELValidator">
        <property name="clientRule" value="mediaAdd" />
        <property name="ruleMaps">
          <map>
              <entry key ="mediaAdd">
                  <list>
                      <value>imageMessage.fileUrl != null ? "valid" : "fileUrl is required."</value>
                      <value>(imageMessage.fileUrl != null &amp;&amp; !imageMessage.fileUrl.matches(".*http://.*|.*https://.*|.*s3://.*|.*file:///.*")) ? "fileUrl is malformed." : "valid"</value>
                      <value>(imageMessage.fileUrl != null &amp;&amp; (!imageMessage.fileUrl.toLowerCase.endsWith(".jpg") &amp;&amp;!imageMessage.fileUrl.toLowerCase.endsWith(".jpeg") &amp;&amp;!imageMessage.fileUrl.toLowerCase.endsWith(".png")&amp;&amp;!imageMessage.fileUrl.toLowerCase.endsWith(".bmp")&amp;&amp;!imageMessage.fileUrl.toLowerCase.endsWith(".gif"))) ? "fileUrl extension is malformed." : "valid"</value>
                      <value>imageMessage.fileName != null ? "valid" : "fileName is required."</value>
                      <value>imageMessage.mediaGuid != null ? "valid": "mediaGuid is required."</value>
                      <value>imageMessage.outerDomainData == null ? "domain is required." : "valid"</value>
                      <value>(domainData != null &amp;&amp; !domainData.domain.domain.matches("Lodging|Cars|ContentRepo")) ? "domain must be eigher 'Lodging', 'Cars' or 'ContentRepo'" : "valid"</value>
                      <value>domainData.domainId != null ? "valid" : "domainId is required."</value>
                      <value>(domainData.domain.domain.endsWith('Lodging') &amp;&amp; domainData.domainId != null &amp;&amp; !domainData.domainId.matches("[0-9]+")) ? "domainId is not numeric." : "valid"</value>
                      <value>imageMessage.userId != null ? "valid" : "userId is required."</value>
                      <value>(domainData != null &amp;&amp; domainData.provider == null) ? "domainProvider is required." : "valid"</value>
                      <value>(domainData.domain.domain.equals('Lodging') &amp;&amp; domainData.domainFields != null &amp;&amp; domainData.domainFields.containsKey("category") &amp;&amp; !domainData.domainFields.get("category").toString.matches("[0-9]+")) ? "category is not numeric." : "valid"</value>
                      <value>(domainData.domain.domain.equals('Lodging') &amp;&amp; domainData.domainFields != null &amp;&amp; domainData.domainFields.containsKey("roomHero") &amp;&amp; !domainData.domainFields.get("roomHero").toString.matches("true|false")) ? "roomHero is not boolean." : "valid"</value>
                      <value>(domainData.domain.domain.equals('Lodging') &amp;&amp; domainData.domainFields != null &amp;&amp; domainData.domainFields.containsKey("rooms") &amp;&amp; domainData.domainFields.get("rooms").isEmpty) ? "rooms list is empty" : "valid"</value>
                      <value>(imageMessage.rotation == null) ? "valid" : (imageMessage.rotation.matches("[0-9]+") &amp;&amp; Integer.parseInt(imageMessage.rotation)%90 == 0  &amp;&amp; Integer.parseInt(imageMessage.rotation) &lt;= 270) ? "valid" : "rotation accepted values are 0, 90, 180, and 270."</value>
                  </list>
              </entry>
          </map>
      </property>
    </bean>

    <bean id="tempDerivativeMVELValidator" class="com.expedia.content.media.processing.services.validator.TempDerivativeMVELValidator">
        <property name="ruleList">
            <list>
                <value>tempDerivativeMessage.fileUrl != null ? "valid" : "fileUrl is required."</value>
                <value>(tempDerivativeMessage.fileUrl != null &amp;&amp; !tempDerivativeMessage.fileUrl.matches(".*http://.*|.*https://.*|.*s3://.*|.*file:///.*")) ? "fileUrl is malformed." : "valid"</value>
                <value>(tempDerivativeMessage.fileUrl != null &amp;&amp; (!tempDerivativeMessage.fileUrl.toLowerCase.endsWith(".jpg") &amp;&amp;!tempDerivativeMessage.fileUrl.toLowerCase.endsWith(".jpeg") &amp;&amp;!tempDerivativeMessage.fileUrl.toLowerCase.endsWith(".png")&amp;&amp;!tempDerivativeMessage.fileUrl.toLowerCase.endsWith(".bmp")&amp;&amp;!tempDerivativeMessage.fileUrl.toLowerCase.endsWith(".gif"))) ? "fileUrl extension is malformed." : "valid"</value>
                <value>(tempDerivativeMessage.rotation == null) ? "valid" : (tempDerivativeMessage.rotation.matches("[0-9]+") &amp;&amp; Integer.parseInt(tempDerivativeMessage.rotation)%90 == 0  &amp;&amp; Integer.parseInt(tempDerivativeMessage.rotation) &lt;= 270) ? "valid" : "rotation accepted values are 0, 90, 180, and 270."</value>
                <value>tempDerivativeMessage.width != null ? "valid" : "width is required."</value>
                <value>tempDerivativeMessage.height != null ? "valid" : "height is required."</value>
            </list>
        </property>
    </bean>

</beans>
